#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Wed Feb 15 07:34:54 2023
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 1  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn ./vpncmd
match_max 100000
expect -exact "vpncmd command - SoftEther VPN Command Line Management Utility\r
SoftEther VPN Command Line Management Utility (vpncmd command)\r
Version 4.41 Build 9782   (English)\r
Compiled 2022/11/17 16:36:25 by buildsan at crosswin with OpenSSL 3.0.7\r
Copyright (c) 2012-2022 SoftEther VPN Project. All Rights Reserved.\r
\r
By using vpncmd program, the following can be achieved. \r
\r
1. Management of VPN Server or VPN Bridge \r
2. Management of VPN Client\r
3. Use of VPN Tools (certificate creation and Network Traffic Speed Test Tool)\r
\r
Select 1, 2 or 3: "
send -- "1\r"
expect -exact "1\r
\r
Specify the host name or IP address of the computer that the destination VPN Server or VPN Bridge is operating on. \r
By specifying according to the format 'host name:port number', you can also specify the port number. \r
(When the port number is unspecified, 443 is used.)\r
If nothing is input and the Enter key is pressed, the connection will be made to the port number 8888 of localhost (this computer).\r
Hostname of IP Address of Destination: "
send -- "\r"
expect -exact "\r
\r
If connecting to the server by Virtual Hub Admin Mode, please input the Virtual Hub name. \r
If connecting by server admin mode, please press Enter without inputting anything.\r
Specify Virtual Hub Name: "
send -- "\r"
expect -exact "\r
Connection has been established with VPN Server \"localhost\" (port 443).\r
\r
You have administrator privileges for the entire VPN Server.\r
\r
VPN Server>"
send -- "serverpasswordset\r"
expect -exact "serverpasswordset\r
ServerPasswordSet command - Set VPN Server Administrator Password\r
Please enter the password. To cancel press the Ctrl+D key.\r
\r
Password: "
send -- "password"
send -- "\r"
expect -exact "\r
Confirm input: "
send -- "password"
send -- "\r"
expect eof
